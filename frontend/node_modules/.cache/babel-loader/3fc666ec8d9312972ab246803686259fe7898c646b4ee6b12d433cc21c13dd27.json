{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\webAPI_cw\\\\frontend\\\\src\\\\components\\\\RecipeDetail.jsx\",\n  _s = $RefreshSig$();\n// // RecipeDetail.jsx\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import axios from 'axios';\n\n// function RecipeDetail() {\n//   const [recipe, setRecipe] = useState(null);\n//   const { id } = useParams(); // This hooks allow us to access the URL parameters\n\n//   useEffect(() => {\n//     async function fetchRecipe() {\n//       try {\n//         const response = await axios.get(`http://localhost:5000/api/recipes/${id}`);\n//         setRecipe(response.data);\n//       } catch (error) {\n//         console.error('Failed to fetch recipe details:', error);\n//       }\n//     }\n\n//     fetchRecipe();\n//   }, [id]); // This effect runs when the `id` changes\n\n//   if (!recipe) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>{recipe.name}</h1>\n//       <p>{recipe.description}</p>\n//       {/* Display other recipe details */}\n//     </div>\n//   );\n// }\n\n// export default RecipeDetail;\n\n// BEST ONE SO FAR BELOW THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecipeDetail() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [recipeCard, setRecipeCard] = useState(null);\n  const [recipeDetails, setRecipeDetails] = useState(null);\n  useEffect(() => {\n    const fetchRecipeDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/recipes/details/${id}`);\n        setRecipeCard(response.data);\n      } catch (error) {\n        console.error('Failed to fetch recipe details:', error);\n      }\n    };\n    const fetchRecipeInformation = async () => {\n      const infoResponse = await axios.get(`http://localhost:5000/api/recipes/information/${id}`);\n      setRecipeDetails(infoResponse.data);\n    };\n    fetchRecipeDetails();\n    fetchRecipeInformation();\n  }, [id]);\n  if (!recipeCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recipe Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: recipeCard.url,\n      alt: \"Recipe Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: recipeDetails.summary\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Difficulty: \", recipeDetails.veryHealthy ? 'Hard' : 'Easy']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nutritional Information:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recipeDetails.nutrition.nutrients.map(nutrient => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [nutrient.name, \": \", nutrient.amount, \" \", nutrient.unit]\n      }, nutrient.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Shopping List:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recipeDetails.extendedIngredients.map(ing => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [ing.name, \" (Quantity: \", ing.amount, \" \", ing.unit, \")\"]\n      }, ing.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(RecipeDetail, \"75EM39Th8S9+9e9s6RYMVLv2Wu8=\", false, function () {\n  return [useParams];\n});\n_c = RecipeDetail;\nexport default RecipeDetail;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import axios from 'axios';\n\n// function RecipeDetail() {\n//   const { id } = useParams();\n//   const [recipeDetails, setRecipeDetails] = useState(null);\n//   const [recipeCard, setRecipeCard] = useState(null);\n\n//   useEffect(() => {\n//     const fetchRecipeCard = async () => {\n//       const cardResponse = await axios.get(`http://localhost:5000/api/recipes/details/${id}`);\n//       setRecipeCard(cardResponse.data);\n//     };\n//     const fetchRecipeInformation = async () => {\n//       const infoResponse = await axios.get(`http://localhost:5000/api/recipes/information/${id}`);\n//       setRecipeDetails(infoResponse.data);\n//     };\n\n//     fetchRecipeCard();\n//     fetchRecipeInformation();\n//   }, [id]);\n\n//   // Helper function to filter out only the nutrients we are interested in\n//   const getImportantNutrients = (nutrients) => {\n//     const needed = [\"Calories\", \"Protein\", \"Carbohydrates\", \"Fat\"];\n//     return nutrients.filter(nutrient => needed.includes(nutrient.title));\n//   };\n\n//   if (!recipeDetails || !recipeCard) {\n//     return <div>Loading...</div>;\n//   }\n\n//   const importantNutrients = recipeDetails ? getImportantNutrients(recipeDetails.nutrition.nutrients) : [];\n\n//   return (\n//     <div>\n//       <h1>Recipe Details</h1>\n//       <img src={recipeCard.url} alt=\"Recipe Card\" />\n//       <div dangerouslySetInnerHTML={{ __html: recipeDetails.summary }}></div>\n//       <p>Difficulty: {recipeDetails.veryHealthy ? 'Hard' : 'Easy'}</p>\n//       <p>Health Score: {recipeDetails.healthScore}</p>\n//       <p>Nutritional Information:</p>\n//       <ul>\n//         {importantNutrients.map(nutrient => (\n//           <li key={nutrient.title}>{nutrient.title}: {nutrient.amount}{nutrient.unit}</li>\n//         ))}\n//       </ul>\n//       <p>Ingredients:</p>\n//       <ul>\n//         {recipeDetails.extendedIngredients.map(ing => (\n//           <li key={ing.id}>{ing.name} (Quantity: {ing.amount} {ing.unit})</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default RecipeDetail;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import axios from 'axios';\n\n// function RecipeDetail() {\n//     const { id } = useParams();\n//     const [recipeDetails, setRecipeDetails] = useState(null);\n//     const [recipeCard, setRecipeCard] = useState(null);\n\n//     useEffect(() => {\n//         const fetchRecipeCard = async () => {\n//             const cardResponse = await axios.get(`http://localhost:5000/api/recipes/details/${id}`);\n//             setRecipeCard(cardResponse.data);\n//         };\n\n//         const fetchRecipeInformation = async () => {\n//             const infoResponse = await axios.get(`http://localhost:5000/api/recipes/information/${id}`);\n//             if (infoResponse.data && infoResponse.data.nutrition && infoResponse.data.nutrition.nutrients) {\n//                 const nutrients = infoResponse.data.nutrition.nutrients;\n//                 const nutrition = {\n//                     calories: nutrients.find(n => n.title === 'Calories')?.amount,\n//                     protein: nutrients.find(n => n.title === 'Protein')?.amount,\n//                     carbs: nutrients.find(n => n.title === 'Carbohydrates')?.amount,\n//                     fats: nutrients.find(n => n.title === 'Fat')?.amount\n//                 };\n//                 infoResponse.data.nutritionInfo = nutrition;  // Append the simplified nutrition info to the response data\n//             }\n//             setRecipeDetails(infoResponse.data);\n//         };\n\n//         fetchRecipeCard();\n//         fetchRecipeInformation();\n//     }, [id]);\n\n//     if (!recipeDetails || !recipeCard) {\n//         return <div>Loading...</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h1>Recipe Details</h1>\n//             <img src={recipeCard.url} alt=\"Recipe Card\" />\n//             <div dangerouslySetInnerHTML={{ __html: recipeDetails.summary }}></div>\n//             <p>Difficulty: {recipeDetails.veryHealthy ? 'Hard' : 'Easy'}</p>\n//             <p>Health Score: {recipeDetails.healthScore}</p>\n//             <p>Nutritional Information:</p>\n//             {recipeDetails.nutritionInfo && (\n//                 <ul>\n//                     <li>Calories: {recipeDetails.nutritionInfo.calories}</li>\n//                     <li>Protein: {recipeDetails.nutritionInfo.protein}</li>\n//                     <li>Carbs: {recipeDetails.nutritionInfo.carbs}</li>\n//                     <li>Fats: {recipeDetails.nutritionInfo.fats}</li>\n//                 </ul>\n//             )}\n//             <p>Ingredients:</p>\n//             <ul>\n//                 {recipeDetails.extendedIngredients?.map(ing => (\n//                     <li key={ing.id}>{ing.name} (Quantity: {ing.amount} {ing.unit})</li>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n\n// export default RecipeDetail;\nvar _c;\n$RefreshReg$(_c, \"RecipeDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","jsxDEV","_jsxDEV","RecipeDetail","_s","id","recipeCard","setRecipeCard","recipeDetails","setRecipeDetails","fetchRecipeDetails","response","get","data","error","console","fetchRecipeInformation","infoResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","src","url","alt","dangerouslySetInnerHTML","__html","summary","veryHealthy","nutrition","nutrients","map","nutrient","name","amount","unit","title","extendedIngredients","ing","_c","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/webAPI_cw/frontend/src/components/RecipeDetail.jsx"],"sourcesContent":["// // RecipeDetail.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// function RecipeDetail() {\r\n//   const [recipe, setRecipe] = useState(null);\r\n//   const { id } = useParams(); // This hooks allow us to access the URL parameters\r\n\r\n//   useEffect(() => {\r\n//     async function fetchRecipe() {\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:5000/api/recipes/${id}`);\r\n//         setRecipe(response.data);\r\n//       } catch (error) {\r\n//         console.error('Failed to fetch recipe details:', error);\r\n//       }\r\n//     }\r\n\r\n//     fetchRecipe();\r\n//   }, [id]); // This effect runs when the `id` changes\r\n\r\n//   if (!recipe) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>{recipe.name}</h1>\r\n//       <p>{recipe.description}</p>\r\n//       {/* Display other recipe details */}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default RecipeDetail;\r\n\r\n// BEST ONE SO FAR BELOW THIS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction RecipeDetail() {\r\n  const { id } = useParams();\r\n  const [recipeCard, setRecipeCard] = useState(null);\r\n  const [recipeDetails, setRecipeDetails] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchRecipeDetails = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/recipes/details/${id}`);\r\n        setRecipeCard(response.data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch recipe details:', error);\r\n      }\r\n    };\r\n\r\n    const fetchRecipeInformation = async () => {\r\n      const infoResponse = await axios.get(`http://localhost:5000/api/recipes/information/${id}`);\r\n      setRecipeDetails(infoResponse.data);\r\n    };\r\n\r\n    fetchRecipeDetails();\r\n    fetchRecipeInformation();\r\n  }, [id]);\r\n\r\n  if (!recipeCard) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Recipe Details</h1>\r\n      {/* Assuming recipeCard contains a URL to an image of the recipe */}\r\n      <img src={recipeCard.url} alt=\"Recipe Card\" />\r\n\r\n      <div dangerouslySetInnerHTML={{ __html: recipeDetails.summary }}></div>\r\n      <p>Difficulty: {recipeDetails.veryHealthy ? 'Hard' : 'Easy'}</p>\r\n      <p>Nutritional Information:</p>\r\n      <ul>\r\n        {recipeDetails.nutrition.nutrients.map(nutrient => (\r\n          <li key={nutrient.title}>{nutrient.name}: {nutrient.amount} {nutrient.unit}</li>\r\n        ))}\r\n      </ul>\r\n      <p>Shopping List:</p>\r\n      <ul>\r\n        {recipeDetails.extendedIngredients.map(ing => (\r\n          <li key={ing.id}>{ing.name} (Quantity: {ing.amount} {ing.unit})</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecipeDetail;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// function RecipeDetail() {\r\n//   const { id } = useParams();\r\n//   const [recipeDetails, setRecipeDetails] = useState(null);\r\n//   const [recipeCard, setRecipeCard] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchRecipeCard = async () => {\r\n//       const cardResponse = await axios.get(`http://localhost:5000/api/recipes/details/${id}`);\r\n//       setRecipeCard(cardResponse.data);\r\n//     };\r\n//     const fetchRecipeInformation = async () => {\r\n//       const infoResponse = await axios.get(`http://localhost:5000/api/recipes/information/${id}`);\r\n//       setRecipeDetails(infoResponse.data);\r\n//     };\r\n\r\n//     fetchRecipeCard();\r\n//     fetchRecipeInformation();\r\n//   }, [id]);\r\n\r\n//   // Helper function to filter out only the nutrients we are interested in\r\n//   const getImportantNutrients = (nutrients) => {\r\n//     const needed = [\"Calories\", \"Protein\", \"Carbohydrates\", \"Fat\"];\r\n//     return nutrients.filter(nutrient => needed.includes(nutrient.title));\r\n//   };\r\n\r\n//   if (!recipeDetails || !recipeCard) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   const importantNutrients = recipeDetails ? getImportantNutrients(recipeDetails.nutrition.nutrients) : [];\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Recipe Details</h1>\r\n//       <img src={recipeCard.url} alt=\"Recipe Card\" />\r\n//       <div dangerouslySetInnerHTML={{ __html: recipeDetails.summary }}></div>\r\n//       <p>Difficulty: {recipeDetails.veryHealthy ? 'Hard' : 'Easy'}</p>\r\n//       <p>Health Score: {recipeDetails.healthScore}</p>\r\n//       <p>Nutritional Information:</p>\r\n//       <ul>\r\n//         {importantNutrients.map(nutrient => (\r\n//           <li key={nutrient.title}>{nutrient.title}: {nutrient.amount}{nutrient.unit}</li>\r\n//         ))}\r\n//       </ul>\r\n//       <p>Ingredients:</p>\r\n//       <ul>\r\n//         {recipeDetails.extendedIngredients.map(ing => (\r\n//           <li key={ing.id}>{ing.name} (Quantity: {ing.amount} {ing.unit})</li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default RecipeDetail;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// function RecipeDetail() {\r\n//     const { id } = useParams();\r\n//     const [recipeDetails, setRecipeDetails] = useState(null);\r\n//     const [recipeCard, setRecipeCard] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchRecipeCard = async () => {\r\n//             const cardResponse = await axios.get(`http://localhost:5000/api/recipes/details/${id}`);\r\n//             setRecipeCard(cardResponse.data);\r\n//         };\r\n\r\n//         const fetchRecipeInformation = async () => {\r\n//             const infoResponse = await axios.get(`http://localhost:5000/api/recipes/information/${id}`);\r\n//             if (infoResponse.data && infoResponse.data.nutrition && infoResponse.data.nutrition.nutrients) {\r\n//                 const nutrients = infoResponse.data.nutrition.nutrients;\r\n//                 const nutrition = {\r\n//                     calories: nutrients.find(n => n.title === 'Calories')?.amount,\r\n//                     protein: nutrients.find(n => n.title === 'Protein')?.amount,\r\n//                     carbs: nutrients.find(n => n.title === 'Carbohydrates')?.amount,\r\n//                     fats: nutrients.find(n => n.title === 'Fat')?.amount\r\n//                 };\r\n//                 infoResponse.data.nutritionInfo = nutrition;  // Append the simplified nutrition info to the response data\r\n//             }\r\n//             setRecipeDetails(infoResponse.data);\r\n//         };\r\n\r\n//         fetchRecipeCard();\r\n//         fetchRecipeInformation();\r\n//     }, [id]);\r\n\r\n//     if (!recipeDetails || !recipeCard) {\r\n//         return <div>Loading...</div>;\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Recipe Details</h1>\r\n//             <img src={recipeCard.url} alt=\"Recipe Card\" />\r\n//             <div dangerouslySetInnerHTML={{ __html: recipeDetails.summary }}></div>\r\n//             <p>Difficulty: {recipeDetails.veryHealthy ? 'Hard' : 'Easy'}</p>\r\n//             <p>Health Score: {recipeDetails.healthScore}</p>\r\n//             <p>Nutritional Information:</p>\r\n//             {recipeDetails.nutritionInfo && (\r\n//                 <ul>\r\n//                     <li>Calories: {recipeDetails.nutritionInfo.calories}</li>\r\n//                     <li>Protein: {recipeDetails.nutritionInfo.protein}</li>\r\n//                     <li>Carbs: {recipeDetails.nutritionInfo.carbs}</li>\r\n//                     <li>Fats: {recipeDetails.nutritionInfo.fats}</li>\r\n//                 </ul>\r\n//             )}\r\n//             <p>Ingredients:</p>\r\n//             <ul>\r\n//                 {recipeDetails.extendedIngredients?.map(ing => (\r\n//                     <li key={ing.id}>{ing.name} (Quantity: {ing.amount} {ing.unit})</li>\r\n//                 ))}\r\n//             </ul>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default RecipeDetail;\r\n"],"mappings":"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CI,GAAG,CAACH,IAAI,EAAC,GAAC;MAAA,GAAtDG,GAAG,CAAClC,EAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoD,CACpE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAClB,EAAA,CAlDQD,YAAY;EAAA,QACJJ,SAAS;AAAA;AAAAyC,EAAA,GADjBrC,YAAY;AAoDrB,eAAeA,YAAY;;AAG3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}