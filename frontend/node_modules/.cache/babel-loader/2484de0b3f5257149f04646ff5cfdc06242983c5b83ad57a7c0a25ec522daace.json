{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\webAPI_cw\\\\frontend\\\\src\\\\components\\\\RateRecipe.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n\n// function RateRecipe() {\n//     const { id } = useParams();\n//     const navigate = useNavigate();\n//     const [rating, setRating] = useState('');\n//     const [review, setReview] = useState('');\n//     const [recipe, setRecipe] = useState(null);\n\n//     useEffect(() => {\n//         const fetchRecipe = async () => {\n//             try {\n//                 const { data } = await axios.get(`http://localhost:5000/api/recipes/${id}`);\n//                 setRecipe(data);\n//             } catch (error) {\n//                 console.error('Error fetching recipe:', error);\n//             }\n//         };\n\n//         fetchRecipe();\n//     }, [id]);\n\n//     const submitRating = async () => {\n//         try {\n//             await axios.post(`http://localhost:5000/api/recipes/${id}/ratings`, {\n//                 rating,\n//                 user: \"newuser\", // this should ideally be dynamic based on logged-in user\n//                 review\n//             });\n//             alert('Rating submitted!');\n//             setRating('');\n//             setReview('');\n//             navigate(`/ratings/${id}`); // Refresh the page or navigate as needed\n//         } catch (error) {\n//             console.error('Error submitting rating:', error);\n//             alert('Failed to submit rating');\n//         }\n//     };\n\n//     if (!recipe) {\n//         return <div>Loading...</div>;\n//     }\n\n//     return (\n//         <div>\n//             <h1>Rate {recipe.title}</h1>\n//             <p>{recipe.description}</p>\n//             <div>\n//                 <label>Rating: </label>\n//                 <input type=\"number\" value={rating} onChange={e => setRating(e.target.value)} min=\"1\" max=\"5\" />\n//                 <label>Review: </label>\n//                 <textarea value={review} onChange={e => setReview(e.target.value)} />\n//                 <button onClick={submitRating}>Submit Rating</button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default RateRecipe;\n\nfunction RateRecipe() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [recipe, setRecipe] = useState(null);\n  const [rating, setRating] = useState('');\n  const [review, setReview] = useState('');\n  useEffect(() => {\n    const fetchRecipe = async () => {\n      try {\n        const {\n          data\n        } = await axios.get(`http://localhost:5000/api/recipes/${id}`);\n        setRecipe(data);\n      } catch (error) {\n        console.error('Error fetching recipe:', error);\n      }\n    };\n    fetchRecipe();\n  }, [id]);\n  const submitRating = async () => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/recipes/${id}/ratings`, {\n        rating: parseInt(rating, 10),\n        user: 'newuser',\n        // Ideally, this should be dynamically set based on the logged-in user\n        review\n      });\n      alert('Rating submitted!');\n      setRating('');\n      setReview('');\n      // Refresh recipe data to show new ratings\n      fetchRecipe();\n    } catch (error) {\n      console.error('Error submitting rating:', error);\n      alert('Failed to submit rating');\n    }\n  };\n  if (!recipe) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: recipe.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: rating,\n        onChange: e => setRating(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: review,\n        onChange: e => setReview(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitRating,\n        children: \"Submit Rating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(RateRecipe, \"t1SoPJLd18bVqT7eUZ8WmtQjaIw=\", true);\n_c = RateRecipe;\nvar _c;\n$RefreshReg$(_c, \"RateRecipe\");","map":{"version":3,"names":["RateRecipe","_s","id","useParams","recipe","setRecipe","useState","rating","setRating","review","setReview","useEffect","fetchRecipe","data","axios","get","error","console","submitRating","response","post","parseInt","user","alert","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","title","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/webAPI_cw/frontend/src/components/RateRecipe.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// function RateRecipe() {\r\n//     const { id } = useParams();\r\n//     const navigate = useNavigate();\r\n//     const [rating, setRating] = useState('');\r\n//     const [review, setReview] = useState('');\r\n//     const [recipe, setRecipe] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchRecipe = async () => {\r\n//             try {\r\n//                 const { data } = await axios.get(`http://localhost:5000/api/recipes/${id}`);\r\n//                 setRecipe(data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching recipe:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchRecipe();\r\n//     }, [id]);\r\n\r\n//     const submitRating = async () => {\r\n//         try {\r\n//             await axios.post(`http://localhost:5000/api/recipes/${id}/ratings`, {\r\n//                 rating,\r\n//                 user: \"newuser\", // this should ideally be dynamic based on logged-in user\r\n//                 review\r\n//             });\r\n//             alert('Rating submitted!');\r\n//             setRating('');\r\n//             setReview('');\r\n//             navigate(`/ratings/${id}`); // Refresh the page or navigate as needed\r\n//         } catch (error) {\r\n//             console.error('Error submitting rating:', error);\r\n//             alert('Failed to submit rating');\r\n//         }\r\n//     };\r\n\r\n//     if (!recipe) {\r\n//         return <div>Loading...</div>;\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Rate {recipe.title}</h1>\r\n//             <p>{recipe.description}</p>\r\n//             <div>\r\n//                 <label>Rating: </label>\r\n//                 <input type=\"number\" value={rating} onChange={e => setRating(e.target.value)} min=\"1\" max=\"5\" />\r\n//                 <label>Review: </label>\r\n//                 <textarea value={review} onChange={e => setReview(e.target.value)} />\r\n//                 <button onClick={submitRating}>Submit Rating</button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default RateRecipe;\r\n\r\n\r\nfunction RateRecipe() {\r\n    const { id } = useParams();\r\n    const [recipe, setRecipe] = useState(null);\r\n    const [rating, setRating] = useState('');\r\n    const [review, setReview] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchRecipe = async () => {\r\n            try {\r\n                const { data } = await axios.get(`http://localhost:5000/api/recipes/${id}`);\r\n                setRecipe(data);\r\n            } catch (error) {\r\n                console.error('Error fetching recipe:', error);\r\n            }\r\n        };\r\n\r\n        fetchRecipe();\r\n    }, [id]);\r\n\r\n    const submitRating = async () => {\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/api/recipes/${id}/ratings`, {\r\n                rating: parseInt(rating, 10),\r\n                user: 'newuser', // Ideally, this should be dynamically set based on the logged-in user\r\n                review\r\n            });\r\n            alert('Rating submitted!');\r\n            setRating('');\r\n            setReview('');\r\n            // Refresh recipe data to show new ratings\r\n            fetchRecipe();\r\n        } catch (error) {\r\n            console.error('Error submitting rating:', error);\r\n            alert('Failed to submit rating');\r\n        }\r\n    };\r\n\r\n    if (!recipe) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{recipe.title}</h1>\r\n            {/* Display the rest of the recipe details */}\r\n            <div>\r\n                <input type=\"number\" value={rating} onChange={e => setRating(e.target.value)} />\r\n                <textarea value={review} onChange={e => setReview(e.target.value)} />\r\n                <button onClick={submitRating}>Submit Rating</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}